using System;
using System.Collections.Generic;

using Grasshopper.Kernel;
using Rhino.Geometry;

namespace HOK.RevitInteraction
{
    public class DataWatcher : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public DataWatcher()
            : base("WatchComponent", "Watcher",
                "This component will provide the status of the Revit interaction process",
                "HOK", "Interaction")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBooleanParameter("RunWatcher", "Run", "Add a button parameter to run this watcher", GH_ParamAccess.item, false);
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("Revit Path", "Rvt", "Revit file path that communicates with the current Rhino session.", GH_ParamAccess.item);
            pManager.AddTextParameter("Dwg Path", "Dwg", "Dwg file path that exported from Revit", GH_ParamAccess.item);
            pManager.AddTextParameter("Result Data", "Data", "Result data file generated by analysis components", GH_ParamAccess.item);
            pManager.AddTextParameter("Analysis Type", "AType", "Analysis type set to be run in Rhino", GH_ParamAccess.item);
            pManager.AddTextParameter("Message", "Msg", "Result message from the process", GH_ParamAccess.item);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
        }

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// </summary>
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                // You can add image files to your project resources and access them like this:
                //return Resources.IconForThisComponent;
                return Properties.Resources.show;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid
        {
            get { return new Guid("{c6cd04f0-46d0-41a0-8785-5953f43d366b}"); }
        }
    }
}
